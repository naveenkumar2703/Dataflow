#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "GaussianElimination"
#define MAXFILE_BUILD_DIR  "/tmp/GaussianElimination_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160604
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(vectorSize, 4)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 36)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "GaussianEliminationKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(GaussianEliminationKernel, Kernel)
MANAGER_NODE(inVector, PCIe_From_Host)
MANAGER_NODE(inVector1, PCIe_From_Host)
MANAGER_NODE(outVector, PCIe_To_Host)
MANAGER_NODE(Stream_1, Fifo)
MANAGER_NODE(Stream_4, Fifo)
MANAGER_NODE(Stream_9, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(GaussianEliminationKernel, inVector, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(GaussianEliminationKernel, inVector1, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(GaussianEliminationKernel, outVector, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(inVector, inVector, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(inVector1, inVector1, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(outVector, outVector, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_4, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_4, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_9, input, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_9, output, OUT, PCIE, 128, PUSH)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inVector, inVector, Stream_1, input, 128)
MANAGER_STREAM(inVector1, inVector1, Stream_4, input, 128)
MANAGER_STREAM(GaussianEliminationKernel, outVector, Stream_9, input, 128)
MANAGER_STREAM(Stream_1, output, GaussianEliminationKernel, inVector, 128)
MANAGER_STREAM(Stream_4, output, GaussianEliminationKernel, inVector1, 128)
MANAGER_STREAM(Stream_9, output, outVector, outVector, 128)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(GaussianEliminationKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(inVector, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(inVector1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(outVector, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_9, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(GaussianEliminationKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(GaussianEliminationKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(GaussianEliminationKernel, GaussianEliminationKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(GaussianEliminationKernel, inVector, 0)
DEBUG_INPUT_BITS(GaussianEliminationKernel, inVector1, 1)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(GaussianEliminationKernel, outVector, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inVector, PCIePushSourceSyncMax4, "inVector")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inVector1, PCIePushSourceSyncMax4, "inVector1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, FifoPushToPullSync, "Stream_1", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, FifoPushToPullSync, "Stream_4", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(GaussianEliminationKernel, GaussianEliminationKernel, "GaussianEliminationKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_9, FifoPushToPushSync, "Stream_9", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outVector, PCIePushSinkSyncMax3, "outVector")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 2, 1, 0, 0, 0, 0, 0, 36)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "4f2d8c6d8cbff7e3d15786dc44d3978eff55fb07aa2fc402a3de63b2c29c93ba")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_ctld_done, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_ctld_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_ctld_read, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_ctld_request, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_fill_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_flush_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_flush_start_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_full_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(GaussianEliminationKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inVector, STREAM_FROM_HOST, 0)
PCIE_STREAM(inVector1, STREAM_FROM_HOST, 1)
PCIE_STREAM(outVector, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(GaussianEliminationKernel.io_inVector_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(GaussianEliminationKernel.io_inVector1_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(GaussianEliminationKernel.io_outVector_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(GaussianEliminationKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(GaussianEliminationKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(GaussianEliminationKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2))
REG(GaussianEliminationKernel.dbg_ctld_done, 0x10, 1, hwBits(2))
REG(GaussianEliminationKernel.dbg_ctld_empty, 0x11, 1, hwBits(2))
REG(GaussianEliminationKernel.dbg_ctld_read, 0x12, 1, hwBits(2))
REG(GaussianEliminationKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6))
REG(GaussianEliminationKernel.dbg_ctld_request, 0x14, 1, hwBits(2))
REG(GaussianEliminationKernel.dbg_done_out, 0x15, 1, hwBits(1))
REG(GaussianEliminationKernel.dbg_fill_level, 0x16, 1, hwBits(7))
REG(GaussianEliminationKernel.dbg_flush_level, 0x17, 1, hwBits(7))
REG(GaussianEliminationKernel.dbg_flush_start, 0x18, 1, hwBits(1))
REG(GaussianEliminationKernel.dbg_flush_start_level, 0x19, 1, hwBits(7))
REG(GaussianEliminationKernel.dbg_flushing, 0x1a, 1, hwBits(1))
REG(GaussianEliminationKernel.dbg_full_level, 0x1b, 1, hwBits(7))
REG(GaussianEliminationKernel.dbg_out_stall, 0x1c, 1, hwBits(1))
REG(GaussianEliminationKernel.dbg_out_valid, 0x1d, 1, hwBits(1))
REG(GaussianEliminationKernel.dbg_stall_vector, 0x1e, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(GaussianEliminationKernel.io_inVector_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(GaussianEliminationKernel.io_inVector1_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(GaussianEliminationKernel.io_outVector_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(GaussianEliminationKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(GaussianEliminationKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_ctld_done, 0x10, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_ctld_empty, 0x11, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_ctld_read, 0x12, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_ctld_request, 0x14, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_done_out, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_fill_level, 0x16, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_flush_level, 0x17, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_flush_start, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_flush_start_level, 0x19, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_flushing, 0x1a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_full_level, 0x1b, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_out_stall, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_out_valid, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(GaussianEliminationKernel.dbg_stall_vector, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("4f2d8c6d8cbff7e3d15786dc44d3978eff55fb07aa2fc402a3de63b2c29c93ba")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME GaussianElimination
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_GaussianElimination_H
#define SLIC_DECLARATIONS_GaussianElimination_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define GaussianElimination_PCIE_ALIGNMENT (16)
#define GaussianElimination_vectorSize (4)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_inVector The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [in] instream_inVector1 The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [out] outstream_outVector The stream should be of size ((param_N * 4) * 4) bytes.
 */
void GaussianElimination(
	int32_t param_N,
	const float *instream_inVector,
	const float *instream_inVector1,
	float *outstream_outVector);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_inVector The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [in] instream_inVector1 The stream should be of size ((param_N * 4) * 4) bytes.
 * \param [out] outstream_outVector The stream should be of size ((param_N * 4) * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *GaussianElimination_nonblock(
	int32_t param_N,
	const float *instream_inVector,
	const float *instream_inVector1,
	float *outstream_outVector);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const float *instream_inVector; /**<  [in] The stream should be of size ((param_N * 4) * 4) bytes. */
	const float *instream_inVector1; /**<  [in] The stream should be of size ((param_N * 4) * 4) bytes. */
	float *outstream_outVector; /**<  [out] The stream should be of size ((param_N * 4) * 4) bytes. */
} GaussianElimination_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void GaussianElimination_run(
	max_engine_t *engine,
	GaussianElimination_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianElimination_run_nonblock(
	max_engine_t *engine,
	GaussianElimination_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void GaussianElimination_run_group(max_group_t *group, GaussianElimination_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianElimination_run_group_nonblock(max_group_t *group, GaussianElimination_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void GaussianElimination_run_array(max_engarray_t *engarray, GaussianElimination_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianElimination_run_array_nonblock(max_engarray_t *engarray, GaussianElimination_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* GaussianElimination_convert(max_file_t *maxfile, GaussianElimination_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* GaussianElimination_init(void);

/* Error handling functions */
int GaussianElimination_has_errors(void);
const char* GaussianElimination_get_errors(void);
void GaussianElimination_clear_errors(void);
/* Free statically allocated maxfile data */
void GaussianElimination_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int GaussianElimination_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int GaussianElimination_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_GaussianElimination_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(GaussianEliminationKernel, 32, NodeInputMappedReg, "Scalar input (io_outVector_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 33, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 0, NodeInputMappedReg, "Scalar input (io_inVector_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 2, NodeInput, "Input(inVector)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 3, NodeSlice, "[31:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 4, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 11, NodeInputMappedReg, "Scalar input (io_inVector1_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 12, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 13, NodeInput, "Input(inVector1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 14, NodeSlice, "[31:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 15, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 22, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1014)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:35)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 20, NodeSlice, "[127:96]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 21, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 55, NodeFIFO, "FIFO(33)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 26, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.mulAsRHS(DFEVectorBase.java:879)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:35)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 9, NodeSlice, "[127:96]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 10, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 56, NodeFIFO, "FIFO(44)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 30, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.sub(DFEVectorBase.java:1037)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:36)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 41, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 18, NodeSlice, "[95:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 19, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 57, NodeFIFO, "FIFO(33)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 25, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.mulAsRHS(DFEVectorBase.java:879)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:35)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 7, NodeSlice, "[95:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 8, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 58, NodeFIFO, "FIFO(44)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 29, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.sub(DFEVectorBase.java:1037)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:36)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 39, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 16, NodeSlice, "[63:32]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 17, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:25)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 59, NodeFIFO, "FIFO(33)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 24, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.mulAsRHS(DFEVectorBase.java:879)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:35)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 5, NodeSlice, "[63:32]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 6, NodeReinterpret, "<{HWFloat:8, 24}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:24)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 60, NodeFIFO, "FIFO(44)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 28, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.sub(DFEVectorBase.java:1037)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:36)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 37, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 61, NodeFIFO, "FIFO(33)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 23, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.mulAsRHS(DFEVectorBase.java:879)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:35)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 62, NodeFIFO, "FIFO(44)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 27, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.sub(DFEVectorBase.java:1037)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:36)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 36, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 38, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 40, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 42, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 35, NodeOutput, "Output(outVector)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ngaussianelimination.GaussianEliminationKernel.<init>(GaussianEliminationKernel.maxj:48)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:21)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 47, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 64, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 44, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 45, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 46, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 48, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 63, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 50, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 51, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 53, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 54, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
PHOTON_NODE_DATA(GaussianEliminationKernel, 52, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ngaussianelimination.GaussianEliminationManager.main(GaussianEliminationManager.maxj:27)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int GaussianElimination_has_errors(void)
{	return stored_has_error; }
const char* GaussianElimination_get_errors(void)
{	return stored_error; }
void GaussianElimination_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char GaussianElimination_use_simulation[16];
static void GaussianElimination_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(GaussianElimination_use_simulation, 16, "Gaussian_%05ld_", pid);
}
static const char *GaussianElimination_check_use_simulation(void)
{
	GaussianElimination_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = GaussianElimination_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int GaussianElimination_simulation_launch = 0;
int GaussianElimination_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = GaussianElimination_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int GaussianElimination_simulator_stop(void)
{
	const char *use_sim = GaussianElimination_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void GaussianElimination_static_init(void) 
{
	stored_maxfile = GaussianElimination_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = GaussianElimination_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = GaussianElimination_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			GaussianElimination_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void GaussianElimination_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (GaussianElimination_simulation_launch == 1) {
		int sim_stat = GaussianElimination_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		GaussianElimination_simulation_launch = 0;
	}
}

static int GaussianElimination_get_pcie_alignment(void)
{
#ifdef GaussianElimination_PCIE_ALIGNMENT
	return ((GaussianElimination_PCIE_ALIGNMENT < 1) ? 16 : GaussianElimination_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int GaussianElimination_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = GaussianElimination_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *GaussianElimination_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = GaussianElimination_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct GaussianElimination_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} GaussianElimination_callback_stream_t;

typedef struct GaussianElimination_callback_data {
	GaussianElimination_callback_stream_t stream[3]; 
	int count;
	int max_count;
} GaussianElimination_callback_data_t;

static void GaussianElimination_callback_internal(void *cb_data)
{
	GaussianElimination_callback_data_t *data = (GaussianElimination_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		GaussianElimination_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* GaussianElimination_convert_internal(
	max_file_t *maxfile,
	GaussianElimination_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	GaussianElimination_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(GaussianElimination_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function GaussianElimination_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 3;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &GaussianElimination_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar GaussianEliminationKernel.run_cycle_count */
	uint64_t ticks_GaussianEliminationKernel = param_N;
	max_set_ticks(actions, "GaussianEliminationKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar GaussianEliminationKernel.run_cycle_count*/
	
	int64_t tmp_0 = ((param_N * 4) * 4);
	
	/* code for stream inVector */
	size_t instream_size_inVector = tmp_0;
	if (instream_size_inVector > 0) {
		const float *stream_ptr = interface_actions->instream_inVector;
		if (use_callback && (1 == GaussianElimination_check_aligned(interface_actions->instream_inVector))) {
			float *aligned_instream_inVector = malloc(instream_size_inVector);
			if (aligned_instream_inVector == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inVector'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inVector;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inVector;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inVector;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inVector, interface_actions->instream_inVector, instream_size_inVector);
			stream_ptr = aligned_instream_inVector;
		}
		max_queue_input(actions, "inVector", stream_ptr, instream_size_inVector);
		CHECK_ERRORS;
	}
	/* end of code for stream inVector */
	
	int64_t tmp_1 = ((param_N * 4) * 4);
	
	/* code for stream inVector1 */
	size_t instream_size_inVector1 = tmp_1;
	if (instream_size_inVector1 > 0) {
		const float *stream_ptr = interface_actions->instream_inVector1;
		if (use_callback && (1 == GaussianElimination_check_aligned(interface_actions->instream_inVector1))) {
			float *aligned_instream_inVector1 = malloc(instream_size_inVector1);
			if (aligned_instream_inVector1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inVector1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inVector1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inVector1;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inVector1;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inVector1, interface_actions->instream_inVector1, instream_size_inVector1);
			stream_ptr = aligned_instream_inVector1;
		}
		max_queue_input(actions, "inVector1", stream_ptr, instream_size_inVector1);
		CHECK_ERRORS;
	}
	/* end of code for stream inVector1 */
	
	int64_t tmp_2 = ((param_N * 4) * 4);
	
	/* code for stream outVector */
	size_t outstream_size_outVector = tmp_2;
	if (outstream_size_outVector > 0) {
		float *stream_ptr = interface_actions->outstream_outVector;
		if (use_callback && (1 == GaussianElimination_check_aligned(interface_actions->outstream_outVector))) {
			float *aligned_outstream_outVector = malloc(outstream_size_outVector);
			if (aligned_outstream_outVector == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outVector'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outVector;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outVector;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outVector;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outVector;
		}
		max_queue_output(actions, "outVector", stream_ptr, outstream_size_outVector);
		CHECK_ERRORS;
	}
	/* end of code for stream outVector */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void GaussianElimination(
	int32_t param_N,
	const float *instream_inVector,
	const float *instream_inVector1,
	float *outstream_outVector)
{
	(void) pthread_once(&slic_bs_is_initialised, GaussianElimination_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = GaussianElimination_nonblock(param_N, instream_inVector, instream_inVector1, outstream_outVector);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *GaussianElimination_nonblock(
	int32_t param_N,
	const float *instream_inVector,
	const float *instream_inVector1,
	float *outstream_outVector)
{
	GaussianElimination_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_inVector = instream_inVector;
	interface_actions.instream_inVector1 = instream_inVector1;
	interface_actions.outstream_outVector = outstream_outVector;
	(void) pthread_once(&slic_bs_is_initialised, GaussianElimination_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = GaussianElimination_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void GaussianElimination_run(
	max_engine_t *engine,
	GaussianElimination_actions_t *interface_actions)
{
	max_run_t *run = GaussianElimination_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *GaussianElimination_run_nonblock(
	max_engine_t *engine,
	GaussianElimination_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = GaussianElimination_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void GaussianElimination_run_group(max_group_t *group, GaussianElimination_actions_t *interface_actions)
{
	max_run_t *run = GaussianElimination_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianElimination_run_group_nonblock(max_group_t *group, GaussianElimination_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = GaussianElimination_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void GaussianElimination_run_array(max_engarray_t *engarray, GaussianElimination_actions_t *interface_actions[])
{
	max_run_t *run = GaussianElimination_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *GaussianElimination_run_array_nonblock(max_engarray_t *engarray, GaussianElimination_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = GaussianElimination_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* GaussianElimination_convert(max_file_t *maxfile, GaussianElimination_actions_t *interface_actions)
{
	return GaussianElimination_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(GaussianEliminationKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = ((param_N * 4) * 4);)	
SLIC_STREAM(inVector, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = ((param_N * 4) * 4);)	
SLIC_STREAM(inVector1, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_2 = ((param_N * 4) * 4);)	
SLIC_STREAM(outVector, tmp_2)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkdhdXNzaWFuRWxpbWluYXRp
b24uaCIgbmFtZT0iR2F1c3NpYW5FbGltaW5hdGlvbiI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJ
R05NRU5UIiB0eXBlPSJsb25nIiB2YWx1ZT0iMTYiLz48Y29uc3RhbnQgbmFtZT0idmVjdG9yU2l6
ZSIgdHlwZT0ibG9uZyIgdmFsdWU9IjQiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVu
Y3Rpb24gbmFtZT0iR2F1c3NpYW5FbGltaW5hdGlvbiIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2Nh
bGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7TiZxdW90Oy46IE51bWJlciBvZiBk
YXRhIGl0ZW1zIHRvIHByb2Nlc3MiIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX04iIHR5
cGU9ImludDMyX3QiLz48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAo
KHBhcmFtX04gKiA0KSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJl
YW1faW5WZWN0b3IiIHNpemU9IigocGFyYW1fTiAqIDQpICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIg
dHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48
bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKChwYXJhbV9OICogNCkgKiA0
KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFs
dWU9IigocGFyYW1fTiAqIDQpICogNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9y
IG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFy
YW1fTiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1
bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+
PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJh
dG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRl
c2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgKChwYXJhbV9OICogNCkgKiA0KSBieXRl
cy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX2luVmVjdG9yMSIgc2l6ZT0iKChw
YXJhbV9OICogNCkgKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJmbG9hdCI+PGRpbWVuc2lv
biBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVy
YXRvcj0iLyIgdmFsdWU9IigoKHBhcmFtX04gKiA0KSAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+
PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKChwYXJhbV9OICogNCkgKiA0
KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIo
cGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0YW50VmFsdWUg
dmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZh
bHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3Rh
bnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9s
ZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQg
YmUgb2Ygc2l6ZSAoKHBhcmFtX04gKiA0KSAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJPdXRwdXQi
IG5hbWU9Im91dHN0cmVhbV9vdXRWZWN0b3IiIHNpemU9IigocGFyYW1fTiAqIDQpICogNCkiIHRy
YW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+
PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKChw
YXJhbV9OICogNCkgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBv
cGVyYXRvcj0iKiIgdmFsdWU9IigocGFyYW1fTiAqIDQpICogNCkiPjxmdW5jdGlvbkNhbGw+PG51
bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+PHVzZXJQ
YXJhbSB2YWx1ZT0icGFyYW1fTiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5h
cnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVt
QmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48
L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwv
YXJyYXk+PC9mdW5jdGlvbj48L2VuZ2luZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBHYXVzc2lhbkVsaW1pbmF0aW9uX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3Rv
cmVkX2hhc19lcnJvcjsgfQpjb25zdCBjaGFyKiBHYXVzc2lhbkVsaW1pbmF0aW9uX2dldF9lcnJv
cnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2Vycm9yOyB9CnZvaWQgR2F1c3NpYW5FbGltaW5hdGlv
bl9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9y
ID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBHYXVzc2lhbkVs
aW1pbmF0aW9uX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGljIHZvaWQgR2F1c3NpYW5FbGltaW5h
dGlvbl9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBp
ZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKEdhdXNzaWFuRWxpbWluYXRpb25fdXNlX3NpbXVsYXRp
b24sIDE2LCAiR2F1c3NpYW5fJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqR2F1
c3NpYW5FbGltaW5hdGlvbl9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglHYXVzc2lhbkVs
aW1pbmF0aW9uX2RlZl91c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IG1h
eF9jb25maWdfZ2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsKCWlmICh1c2Vf
c2ltID09IE5VTEwpIHsKCQl1c2Vfc2ltID0gR2F1c3NpYW5FbGltaW5hdGlvbl91c2Vfc2ltdWxh
dGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwg
dXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBHYXVzc2lhbkVsaW1p
bmF0aW9uX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IEdhdXNzaWFuRWxpbWluYXRpb25fc2lt
dWxhdG9yX3N0YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29uc3QgY2hhciAqdXNlX3Np
bSA9IEdhdXNzaWFuRWxpbWluYXRpb25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVm
ZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNv
bXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYNDg0OEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVz
ZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9
PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQg
LSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hp
bGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQg
dGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRl
cnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9y
KGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4g
cmV0dmFsOwp9CgppbnQgR2F1c3NpYW5FbGltaW5hdGlvbl9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gR2F1c3NpYW5FbGltaW5hdGlvbl9jaGVja191c2Vfc2lt
dWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9
c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVg0ODQ4QSAtUyBz
aW11dGlscyBzdG9wIiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIi
KTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8g
ZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQly
ZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkg
ewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8K
CQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJ
cmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIEdhdXNzaWFuRWxpbWluYXRpb25fc3RhdGljX2luaXQo
dm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gR2F1c3NpYW5FbGltaW5hdGlvbl9pbml0KCk7Cglp
ZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2wo
TUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQll
bHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJ
aWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZSht
YXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZigh
bWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05f
RVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRp
bWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwg
MzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IEdhdXNzaWFuRWxpbWluYXRpb25fY2hlY2tfdXNl
X3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZpbGUsIHVzZV9z
aW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBHYXVzc2lhbkVsaW1pbmF0aW9uX3NpbXVsYXRv
cl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9y
ZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJR2F1c3NpYW5FbGltaW5hdGlvbl9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBHYXVzc2lhbkVsaW1pbmF0aW9uX2ZyZWUo
dm9pZCkKewoJaWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVk
X2VuZ2luZSk7CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUg
IT0gTlVMTCkgewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhm
aWxlID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVk
X2Vycm9yKTsKCQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKEdhdXNzaWFuRWxpbWluYXRp
b25fc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IEdhdXNzaWFuRWxp
bWluYXRpb25fc2ltdWxhdG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnBy
aW50ZihzdGRlcnIsICJFcnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCUdhdXNzaWFu
RWxpbWluYXRpb25fc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwoJfQp9CgpzdGF0aWMgaW50IEdhdXNz
aWFuRWxpbWluYXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIEdhdXNzaWFu
RWxpbWluYXRpb25fUENJRV9BTElHTk1FTlQKCXJldHVybiAoKEdhdXNzaWFuRWxpbWluYXRpb25f
UENJRV9BTElHTk1FTlQgPCAxKSA/IDE2IDogR2F1c3NpYW5FbGltaW5hdGlvbl9QQ0lFX0FMSUdO
TUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IEdhdXNzaWFuRWxp
bWluYXRpb25fY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3QgcG9p
bnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gR2F1c3NpYW5FbGltaW5h
dGlvbl9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVybiAocG9pbnRlciAlIGFsaWdubWVudCkg
PyAxIDogMDsKfQoKc3RhdGljIHZvaWQgKkdhdXNzaWFuRWxpbWluYXRpb25fbWFsbG9jX2FsaWdu
ZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBHYXVz
c2lhbkVsaW1pbmF0aW9uX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxpZ24oJnB0
ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZhdWx0IC0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoK
I2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkg
eyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9S
VF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShT
VC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJh
Y2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUs
IE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYo
c3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRf
ZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJF
VDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBHYXVzc2lhbkVsaW1pbmF0aW9uX2NhbGxiYWNrX3N0cmVh
bSB7Cgl1aW50OF90ICp1c2VyX3B0cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAg
c2l6ZTsKCWludCAgICAgIGlzX291dHB1dDsKfSBHYXVzc2lhbkVsaW1pbmF0aW9uX2NhbGxiYWNr
X3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgR2F1c3NpYW5FbGltaW5hdGlvbl9jYWxsYmFja19k
YXRhIHsKCUdhdXNzaWFuRWxpbWluYXRpb25fY2FsbGJhY2tfc3RyZWFtX3Qgc3RyZWFtWzNdOyAK
CWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0gR2F1c3NpYW5FbGltaW5hdGlvbl9jYWxsYmFj
a19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBHYXVzc2lhbkVsaW1pbmF0aW9uX2NhbGxiYWNrX2ludGVy
bmFsKHZvaWQgKmNiX2RhdGEpCnsKCUdhdXNzaWFuRWxpbWluYXRpb25fY2FsbGJhY2tfZGF0YV90
ICpkYXRhID0gKEdhdXNzaWFuRWxpbWluYXRpb25fY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsK
CWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCUdhdXNzaWFuRWxp
bWluYXRpb25fY2FsbGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChz
LT5pc19vdXRwdXQgJiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMt
PmFsaWduZWRfcHRyLCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9Cglm
cmVlKGRhdGEpOwp9CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogR2F1c3NpYW5FbGltaW5hdGlvbl9j
b252ZXJ0X2ludGVybmFsKAoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSwKCUdhdXNzaWFuRWxpbWluYXRp
b25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwK
CXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsK
CW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwp
OwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JT
IGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJR2F1c3NpYW5F
bGltaW5hdGlvbl9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxs
YmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwp
OwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKEdhdXNzaWFu
RWxpbWluYXRpb25fY2FsbGJhY2tfZGF0YV90KSk7CgkJaWYgKGNiX2RhdGEgPT0gTlVMTCkgewoJ
CQlmcHJpbnRmKHN0ZGVyciwgIlVuYWJsZSB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIHN0cmVhbSBj
YWxsYmFjayBkYXRhIGluIGZ1bmN0aW9uIEdhdXNzaWFuRWxpbWluYXRpb25fY29udmVydF9pbnRl
cm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAzOwoJ
CWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsK
CQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmR2F1c3NpYW5FbGltaW5hdGlvbl9jYWxsYmFja19pbnRl
cm5hbDsKCX0KCglpbnQzMl90IHBhcmFtX04gPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fTjsK
CQoJLyogY29kZSBmb3Igc2NhbGFyIEdhdXNzaWFuRWxpbWluYXRpb25LZXJuZWwucnVuX2N5Y2xl
X2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19HYXVzc2lhbkVsaW1pbmF0aW9uS2VybmVsID0gcGFy
YW1fTjsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIkdhdXNzaWFuRWxpbWluYXRpb25LZXJuZWwi
LCBwYXJhbV9OKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgR2F1
c3NpYW5FbGltaW5hdGlvbktlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJCglpbnQ2NF90IHRtcF8w
ID0gKChwYXJhbV9OICogNCkgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGluVmVjdG9yICov
CglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pblZlY3RvciA9IHRtcF8wOwoJaWYgKGluc3RyZWFtX3Np
emVfaW5WZWN0b3IgPiAwKSB7CgkJY29uc3QgZmxvYXQgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2Vf
YWN0aW9ucy0+aW5zdHJlYW1faW5WZWN0b3I7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBH
YXVzc2lhbkVsaW1pbmF0aW9uX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmluc3Ry
ZWFtX2luVmVjdG9yKSkpIHsKCQkJZmxvYXQgKmFsaWduZWRfaW5zdHJlYW1faW5WZWN0b3IgPSBt
YWxsb2MoaW5zdHJlYW1fc2l6ZV9pblZlY3Rvcik7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2lu
VmVjdG9yID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJv
cnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQg
bWVtb3J5IGZvciBzdHJlYW0gJ2luVmVjdG9yJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJ
CSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4
X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5WZWN0b3I7CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVk
X2luc3RyZWFtX2luVmVjdG9yOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0p
LT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVfaW5WZWN0b3I7CgkJCSgmY2JfZGF0YS0+c3Ry
ZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291bnQg
Kz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1faW5WZWN0b3IsIGludGVyZmFjZV9hY3Rp
b25zLT5pbnN0cmVhbV9pblZlY3RvciwgaW5zdHJlYW1fc2l6ZV9pblZlY3Rvcik7CgkJCXN0cmVh
bV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX2luVmVjdG9yOwoJCX0KCQltYXhfcXVldWVfaW5wdXQo
YWN0aW9ucywgImluVmVjdG9yIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9pblZlY3Rvcik7
CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBpblZlY3RvciAq
LwoJCglpbnQ2NF90IHRtcF8xID0gKChwYXJhbV9OICogNCkgKiA0KTsKCQoJLyogY29kZSBmb3Ig
c3RyZWFtIGluVmVjdG9yMSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfaW5WZWN0b3IxID0gdG1w
XzE7CglpZiAoaW5zdHJlYW1fc2l6ZV9pblZlY3RvcjEgPiAwKSB7CgkJY29uc3QgZmxvYXQgKnN0
cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5WZWN0b3IxOwoJCWlmICh1
c2VfY2FsbGJhY2sgJiYgKDEgPT0gR2F1c3NpYW5FbGltaW5hdGlvbl9jaGVja19hbGlnbmVkKGlu
dGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pblZlY3RvcjEpKSkgewoJCQlmbG9hdCAqYWxpZ25l
ZF9pbnN0cmVhbV9pblZlY3RvcjEgPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV9pblZlY3RvcjEpOwoJ
CQlpZiAoYWxpZ25lZF9pbnN0cmVhbV9pblZlY3RvcjEgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9y
dF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJG
YWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnaW5WZWN0b3IxJyIp
OwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNv
dW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJl
YW1faW5WZWN0b3IxOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGln
bmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9pbnN0cmVhbV9pblZlY3RvcjE7CgkJCSgmY2Jf
ZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1fc2l6
ZV9pblZlY3RvcjE7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291
dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5z
dHJlYW1faW5WZWN0b3IxLCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5WZWN0b3IxLCBp
bnN0cmVhbV9zaXplX2luVmVjdG9yMSk7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFt
X2luVmVjdG9yMTsKCQl9CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJpblZlY3RvcjEiLCBz
dHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX2luVmVjdG9yMSk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJ
LyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBpblZlY3RvcjEgKi8KCQoJaW50NjRfdCB0bXBfMiA9
ICgocGFyYW1fTiAqIDQpICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBvdXRWZWN0b3IgKi8K
CXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9vdXRWZWN0b3IgPSB0bXBfMjsKCWlmIChvdXRzdHJlYW1f
c2l6ZV9vdXRWZWN0b3IgPiAwKSB7CgkJZmxvYXQgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0
aW9ucy0+b3V0c3RyZWFtX291dFZlY3RvcjsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IEdh
dXNzaWFuRWxpbWluYXRpb25fY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3Ry
ZWFtX291dFZlY3RvcikpKSB7CgkJCWZsb2F0ICphbGlnbmVkX291dHN0cmVhbV9vdXRWZWN0b3Ig
PSBtYWxsb2Mob3V0c3RyZWFtX3NpemVfb3V0VmVjdG9yKTsKCQkJaWYgKGFsaWduZWRfb3V0c3Ry
ZWFtX291dFZlY3RvciA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9u
cy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBh
bGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICdvdXRWZWN0b3InIik7CgkJCQlDSEVDS19FUlJPUlM7
CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAg
PSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fb3V0VmVjdG9yOwoJCQko
JmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90
KikgYWxpZ25lZF9vdXRzdHJlYW1fb3V0VmVjdG9yOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9k
YXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IG91dHN0cmVhbV9zaXplX291dFZlY3RvcjsKCQkJ
KCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQlj
Yl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fb3V0
VmVjdG9yOwoJCX0KCQltYXhfcXVldWVfb3V0cHV0KGFjdGlvbnMsICJvdXRWZWN0b3IiLCBzdHJl
YW1fcHRyLCBvdXRzdHJlYW1fc2l6ZV9vdXRWZWN0b3IpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8q
IGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gb3V0VmVjdG9yICovCgkKCWlmICh1c2VfY2FsbGJhY2sg
JiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFja19kYXRhID0gTlVMTDsKCQkqY2Fs
bGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsKCX0KCXJldHVybiBhY3Rpb25zOwoj
dW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgR2F1c3NpYW5FbGltaW5hdGlvbigKCWludDMyX3Qg
cGFyYW1fTiwKCWNvbnN0IGZsb2F0ICppbnN0cmVhbV9pblZlY3RvciwKCWNvbnN0IGZsb2F0ICpp
bnN0cmVhbV9pblZlY3RvcjEsCglmbG9hdCAqb3V0c3RyZWFtX291dFZlY3RvcikKewoJKHZvaWQp
IHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgR2F1c3NpYW5FbGltaW5hdGlv
bl9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMg
bm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IEdhdXNzaWFuRWxpbWluYXRpb25fbm9u
YmxvY2socGFyYW1fTiwgaW5zdHJlYW1faW5WZWN0b3IsIGluc3RyZWFtX2luVmVjdG9yMSwgb3V0
c3RyZWFtX291dFZlY3Rvcik7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9u
cyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkdhdXNzaWFuRWxpbWluYXRpb25f
bm9uYmxvY2soCglpbnQzMl90IHBhcmFtX04sCgljb25zdCBmbG9hdCAqaW5zdHJlYW1faW5WZWN0
b3IsCgljb25zdCBmbG9hdCAqaW5zdHJlYW1faW5WZWN0b3IxLAoJZmxvYXQgKm91dHN0cmVhbV9v
dXRWZWN0b3IpCnsKCUdhdXNzaWFuRWxpbWluYXRpb25fYWN0aW9uc190IGludGVyZmFjZV9hY3Rp
b25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fTiA9IHBhcmFtX047CglpbnRlcmZhY2VfYWN0
aW9ucy5pbnN0cmVhbV9pblZlY3RvciA9IGluc3RyZWFtX2luVmVjdG9yOwoJaW50ZXJmYWNlX2Fj
dGlvbnMuaW5zdHJlYW1faW5WZWN0b3IxID0gaW5zdHJlYW1faW5WZWN0b3IxOwoJaW50ZXJmYWNl
X2FjdGlvbnMub3V0c3RyZWFtX291dFZlY3RvciA9IG91dHN0cmVhbV9vdXRWZWN0b3I7Cgkodm9p
ZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBHYXVzc2lhbkVsaW1pbmF0
aW9uX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdh
cyBub3QgbG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZv
aWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEdh
dXNzaWFuRWxpbWluYXRpb25fY29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVy
ZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25z
LCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25z
KTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9y
ZWRfZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkg
ewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVs
c2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rp
b25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1
biBhY3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhf
YWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBHYXVzc2lhbkVsaW1p
bmF0aW9uX3J1bigKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJR2F1c3NpYW5FbGltaW5hdGlvbl9h
Y3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IEdhdXNzaWFu
RWxpbWluYXRpb25fcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hF
Q0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsK
fQoKbWF4X3J1bl90ICpHYXVzc2lhbkVsaW1pbmF0aW9uX3J1bl9ub25ibG9jaygKCW1heF9lbmdp
bmVfdCAqZW5naW5lLAoJR2F1c3NpYW5FbGltaW5hdGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUo
ZW5naW5lKTsgCgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRh
ICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEdhdXNzaWFuRWxpbWlu
YXRpb25fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNi
X2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBh
Y3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1Qo
YWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsK
CQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1
biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNi
X2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxM
KTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxi
cmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNl
ICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBh
cmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4g
dGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgog
Ki8Kdm9pZCBHYXVzc2lhbkVsaW1pbmF0aW9uX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAs
IEdhdXNzaWFuRWxpbWluYXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4
X3J1bl90ICpydW4gPSBHYXVzc2lhbkVsaW1pbmF0aW9uX3J1bl9ncm91cF9ub25ibG9jayhncm91
cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFj
dGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFk
dmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2Rl
ZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJz
dCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5Lgog
KiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4g
CiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24t
YmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25v
bmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBb
aW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMg
QWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0
dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5f
dCAqR2F1c3NpYW5FbGltaW5hdGlvbl9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdy
b3VwLCBHYXVzc2lhbkVsaW1pbmF0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsK
CW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1h
eF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBHYXVzc2lhbkVsaW1pbmF0aW9uX2NvbnZlcnRfaW50ZXJu
YWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9u
cyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0
dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9y
dW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rp
b25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBz
dGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFt
IFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2lu
LG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgog
KiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUg
bGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5n
YXJyYXkuCiAqLwp2b2lkIEdhdXNzaWFuRWxpbWluYXRpb25fcnVuX2FycmF5KG1heF9lbmdhcnJh
eV90ICplbmdhcnJheSwgR2F1c3NpYW5FbGltaW5hdGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0gR2F1c3NpYW5FbGltaW5hdGlvbl9ydW5fYXJy
YXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVu
LCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICog
XGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZv
ciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUg
YXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1l
ZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRo
ZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNr
ZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25l
IG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2Fu
IGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2
aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBv
ZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0
YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1
bl90ICpHYXVzc2lhbkVsaW1pbmF0aW9uX3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlf
dCAqZW5nYXJyYXksIEdhdXNzaWFuRWxpbWluYXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0
aW9uc1tdKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmls
ZShlbmdhcnJheSwgMCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9h
Y3RhcnJheV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBO
VUxMKSByZXR1cm4gTlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhl
bmdhcnJheS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBp
IDwgYWN0YXJyYXktPnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gR2F1
c3NpYW5FbGltaW5hdGlvbl9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rp
b25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVM
TDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0YXJyYXks
IGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25vbmJsb2Nr
KGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZSA7
IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9hY3RhcnJh
eV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8q
KgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50
byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRo
YXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVu
Y3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxl
IFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhl
IGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1p
Yy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICov
Cm1heF9hY3Rpb25zX3QqIEdhdXNzaWFuRWxpbWluYXRpb25fY29udmVydChtYXhfZmlsZV90ICpt
YXhmaWxlLCBHYXVzc2lhbkVsaW1pbmF0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMp
CnsKCXJldHVybiBHYXVzc2lhbkVsaW1pbmF0aW9uX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwg
aW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JT
X1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 33, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 12, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(GaussianEliminationKernel, 52, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02144c0aebf86aa2f0b9548a8dc0bd4119a7c72ec36d02142a3441add20802c41f3b1c1a5bbbbfff55fdd92e")
#endif

